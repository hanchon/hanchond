// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
)

const getAllNodes = `-- name: GetAllNodes :many
SELECT id, chain_id, config_folder, moniker, validator_key, validator_key_name, validator_wallet, key_type, binary_version, process_id, is_validator, is_archive, is_running FROM node
`

func (q *Queries) GetAllNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, getAllNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.ConfigFolder,
			&i.Moniker,
			&i.ValidatorKey,
			&i.ValidatorKeyName,
			&i.ValidatorWallet,
			&i.KeyType,
			&i.BinaryVersion,
			&i.ProcessID,
			&i.IsValidator,
			&i.IsArchive,
			&i.IsRunning,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPorts = `-- name: GetAllPorts :many
SELECT id, node_id, p1317, p8080, p9090, p9091, p8545, p8546, p6065, p26658, p26657, p6060, p26656, p26660 FROM ports
`

func (q *Queries) GetAllPorts(ctx context.Context) ([]Port, error) {
	rows, err := q.db.QueryContext(ctx, getAllPorts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Port
	for rows.Next() {
		var i Port
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.P1317,
			&i.P8080,
			&i.P9090,
			&i.P9091,
			&i.P8545,
			&i.P8546,
			&i.P6065,
			&i.P26658,
			&i.P26657,
			&i.P6060,
			&i.P26656,
			&i.P26660,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChain = `-- name: GetChain :one
SELECT id, name, chain_id, binary_version FROM chain where id =? LIMIT 1
`

func (q *Queries) GetChain(ctx context.Context, id int64) (Chain, error) {
	row := q.db.QueryRowContext(ctx, getChain, id)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChainID,
		&i.BinaryVersion,
	)
	return i, err
}

const getNode = `-- name: GetNode :one
SELECT id, chain_id, config_folder, moniker, validator_key, validator_key_name, validator_wallet, key_type, binary_version, process_id, is_validator, is_archive, is_running FROM node where id =? LIMIT 1
`

func (q *Queries) GetNode(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ConfigFolder,
		&i.Moniker,
		&i.ValidatorKey,
		&i.ValidatorKeyName,
		&i.ValidatorWallet,
		&i.KeyType,
		&i.BinaryVersion,
		&i.ProcessID,
		&i.IsValidator,
		&i.IsArchive,
		&i.IsRunning,
	)
	return i, err
}

const getNodePorts = `-- name: GetNodePorts :one
SELECT id, node_id, p1317, p8080, p9090, p9091, p8545, p8546, p6065, p26658, p26657, p6060, p26656, p26660 FROM ports where node_id =? LIMIT 1
`

func (q *Queries) GetNodePorts(ctx context.Context, nodeID int64) (Port, error) {
	row := q.db.QueryRowContext(ctx, getNodePorts, nodeID)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.P1317,
		&i.P8080,
		&i.P9090,
		&i.P9091,
		&i.P8545,
		&i.P8546,
		&i.P6065,
		&i.P26658,
		&i.P26657,
		&i.P6060,
		&i.P26656,
		&i.P26660,
	)
	return i, err
}

const getRelayer = `-- name: GetRelayer :one
SELECT id, process_id, is_running FROM relayer WHERE id = 1
`

func (q *Queries) GetRelayer(ctx context.Context) (Relayer, error) {
	row := q.db.QueryRowContext(ctx, getRelayer)
	var i Relayer
	err := row.Scan(&i.ID, &i.ProcessID, &i.IsRunning)
	return i, err
}

const initRelayer = `-- name: InitRelayer :exec
INSERT INTO relayer(
    process_id, is_running
) VALUES (
    0,0
)
`

func (q *Queries) InitRelayer(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, initRelayer)
	return err
}

const insertChain = `-- name: InsertChain :one
INSERT INTO chain(
    name, chain_id, binary_version
) VALUES (
    ?,?,?
)
RETURNING id, name, chain_id, binary_version
`

type InsertChainParams struct {
	Name          string
	ChainID       string
	BinaryVersion string
}

func (q *Queries) InsertChain(ctx context.Context, arg InsertChainParams) (Chain, error) {
	row := q.db.QueryRowContext(ctx, insertChain, arg.Name, arg.ChainID, arg.BinaryVersion)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChainID,
		&i.BinaryVersion,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :one
INSERT INTO node(
    chain_id,
    config_folder,
    moniker,
    validator_key,
    validator_key_name,
    validator_wallet,
    key_type,
    binary_version,
    process_id,
    is_validator,
    is_archive,
    is_running
) VALUES (
    ?,?,?,?,?,?,?,?,?,?,?,?
)
RETURNING ID
`

type InsertNodeParams struct {
	ChainID          int64
	ConfigFolder     string
	Moniker          string
	ValidatorKey     string
	ValidatorKeyName string
	ValidatorWallet  string
	KeyType          string
	BinaryVersion    string
	ProcessID        int64
	IsValidator      int64
	IsArchive        int64
	IsRunning        int64
}

func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertNode,
		arg.ChainID,
		arg.ConfigFolder,
		arg.Moniker,
		arg.ValidatorKey,
		arg.ValidatorKeyName,
		arg.ValidatorWallet,
		arg.KeyType,
		arg.BinaryVersion,
		arg.ProcessID,
		arg.IsValidator,
		arg.IsArchive,
		arg.IsRunning,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertPorts = `-- name: InsertPorts :exec
INSERT INTO ports(
    node_id,
	p1317,
	p8080,
	p9090,
	p9091,
	p8545,
	p8546,
	p6065,
	p26658,
	p26657,
	p6060,
	p26656,
	p26660
) VALUES (
    ?,?,?,?,?,?,?,?,?,?,?,?,?
)
`

type InsertPortsParams struct {
	NodeID int64
	P1317  int64
	P8080  int64
	P9090  int64
	P9091  int64
	P8545  int64
	P8546  int64
	P6065  int64
	P26658 int64
	P26657 int64
	P6060  int64
	P26656 int64
	P26660 int64
}

func (q *Queries) InsertPorts(ctx context.Context, arg InsertPortsParams) error {
	_, err := q.db.ExecContext(ctx, insertPorts,
		arg.NodeID,
		arg.P1317,
		arg.P8080,
		arg.P9090,
		arg.P9091,
		arg.P8545,
		arg.P8546,
		arg.P6065,
		arg.P26658,
		arg.P26657,
		arg.P6060,
		arg.P26656,
		arg.P26660,
	)
	return err
}

const setBinaryVersion = `-- name: SetBinaryVersion :exec
UPDATE node SET
    binary_version = ?
WHERE (
    id = ?
)
`

type SetBinaryVersionParams struct {
	BinaryVersion string
	ID            int64
}

func (q *Queries) SetBinaryVersion(ctx context.Context, arg SetBinaryVersionParams) error {
	_, err := q.db.ExecContext(ctx, setBinaryVersion, arg.BinaryVersion, arg.ID)
	return err
}

const setProcessID = `-- name: SetProcessID :exec
UPDATE node SET
    process_id = ?,
    is_running = ?
WHERE (
    id = ?
)
`

type SetProcessIDParams struct {
	ProcessID int64
	IsRunning int64
	ID        int64
}

func (q *Queries) SetProcessID(ctx context.Context, arg SetProcessIDParams) error {
	_, err := q.db.ExecContext(ctx, setProcessID, arg.ProcessID, arg.IsRunning, arg.ID)
	return err
}

const updateRelayer = `-- name: UpdateRelayer :exec
UPDATE relayer SET process_id = ?, is_running = ? WHERE id = 1
`

type UpdateRelayerParams struct {
	ProcessID int64
	IsRunning int64
}

func (q *Queries) UpdateRelayer(ctx context.Context, arg UpdateRelayerParams) error {
	_, err := q.db.ExecContext(ctx, updateRelayer, arg.ProcessID, arg.IsRunning)
	return err
}
