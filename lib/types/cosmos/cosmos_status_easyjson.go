// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cosmos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3d16d037DecodeGithubComHanchonHanchondLibTypesCosmos(in *jlexer.Lexer, out *StatusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "result":
			easyjson3d16d037Decode(in, &out.Result)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037EncodeGithubComHanchonHanchondLibTypesCosmos(out *jwriter.Writer, in StatusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Jsonrpc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		easyjson3d16d037Encode(out, in.Result)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d16d037EncodeGithubComHanchonHanchondLibTypesCosmos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d16d037EncodeGithubComHanchonHanchondLibTypesCosmos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d16d037DecodeGithubComHanchonHanchondLibTypesCosmos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d16d037DecodeGithubComHanchonHanchondLibTypesCosmos(l, v)
}
func easyjson3d16d037Decode(in *jlexer.Lexer, out *struct {
	NodeInfo struct {
		ProtocolVersion struct {
			P2P   string `json:"p2p"`
			Block string `json:"block"`
			App   string `json:"app"`
		} `json:"protocol_version"`
		ID         string `json:"id"`
		ListenAddr string `json:"listen_addr"`
		Network    string `json:"network"`
		Version    string `json:"version"`
		Channels   string `json:"channels"`
		Moniker    string `json:"moniker"`
		Other      struct {
			TxIndex    string `json:"tx_index"`
			RPCAddress string `json:"rpc_address"`
		} `json:"other"`
	} `json:"node_info"`
	SyncInfo struct {
		LatestBlockHash     string    `json:"latest_block_hash"`
		LatestAppHash       string    `json:"latest_app_hash"`
		LatestBlockHeight   string    `json:"latest_block_height"`
		LatestBlockTime     time.Time `json:"latest_block_time"`
		EarliestBlockHash   string    `json:"earliest_block_hash"`
		EarliestAppHash     string    `json:"earliest_app_hash"`
		EarliestBlockHeight string    `json:"earliest_block_height"`
		EarliestBlockTime   time.Time `json:"earliest_block_time"`
		CatchingUp          bool      `json:"catching_up"`
	} `json:"sync_info"`
	ValidatorInfo struct {
		Address string `json:"address"`
		PubKey  struct {
			Type  string `json:"type"`
			Value string `json:"value"`
		} `json:"pub_key"`
		VotingPower string `json:"voting_power"`
	} `json:"validator_info"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node_info":
			easyjson3d16d037Decode1(in, &out.NodeInfo)
		case "sync_info":
			easyjson3d16d037Decode2(in, &out.SyncInfo)
		case "validator_info":
			easyjson3d16d037Decode3(in, &out.ValidatorInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode(out *jwriter.Writer, in struct {
	NodeInfo struct {
		ProtocolVersion struct {
			P2P   string `json:"p2p"`
			Block string `json:"block"`
			App   string `json:"app"`
		} `json:"protocol_version"`
		ID         string `json:"id"`
		ListenAddr string `json:"listen_addr"`
		Network    string `json:"network"`
		Version    string `json:"version"`
		Channels   string `json:"channels"`
		Moniker    string `json:"moniker"`
		Other      struct {
			TxIndex    string `json:"tx_index"`
			RPCAddress string `json:"rpc_address"`
		} `json:"other"`
	} `json:"node_info"`
	SyncInfo struct {
		LatestBlockHash     string    `json:"latest_block_hash"`
		LatestAppHash       string    `json:"latest_app_hash"`
		LatestBlockHeight   string    `json:"latest_block_height"`
		LatestBlockTime     time.Time `json:"latest_block_time"`
		EarliestBlockHash   string    `json:"earliest_block_hash"`
		EarliestAppHash     string    `json:"earliest_app_hash"`
		EarliestBlockHeight string    `json:"earliest_block_height"`
		EarliestBlockTime   time.Time `json:"earliest_block_time"`
		CatchingUp          bool      `json:"catching_up"`
	} `json:"sync_info"`
	ValidatorInfo struct {
		Address string `json:"address"`
		PubKey  struct {
			Type  string `json:"type"`
			Value string `json:"value"`
		} `json:"pub_key"`
		VotingPower string `json:"voting_power"`
	} `json:"validator_info"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node_info\":"
		out.RawString(prefix[1:])
		easyjson3d16d037Encode1(out, in.NodeInfo)
	}
	{
		const prefix string = ",\"sync_info\":"
		out.RawString(prefix)
		easyjson3d16d037Encode2(out, in.SyncInfo)
	}
	{
		const prefix string = ",\"validator_info\":"
		out.RawString(prefix)
		easyjson3d16d037Encode3(out, in.ValidatorInfo)
	}
	out.RawByte('}')
}
func easyjson3d16d037Decode3(in *jlexer.Lexer, out *struct {
	Address string `json:"address"`
	PubKey  struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"pub_key"`
	VotingPower string `json:"voting_power"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "pub_key":
			easyjson3d16d037Decode4(in, &out.PubKey)
		case "voting_power":
			out.VotingPower = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode3(out *jwriter.Writer, in struct {
	Address string `json:"address"`
	PubKey  struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"pub_key"`
	VotingPower string `json:"voting_power"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"pub_key\":"
		out.RawString(prefix)
		easyjson3d16d037Encode4(out, in.PubKey)
	}
	{
		const prefix string = ",\"voting_power\":"
		out.RawString(prefix)
		out.String(string(in.VotingPower))
	}
	out.RawByte('}')
}
func easyjson3d16d037Decode4(in *jlexer.Lexer, out *struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode4(out *jwriter.Writer, in struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson3d16d037Decode2(in *jlexer.Lexer, out *struct {
	LatestBlockHash     string    `json:"latest_block_hash"`
	LatestAppHash       string    `json:"latest_app_hash"`
	LatestBlockHeight   string    `json:"latest_block_height"`
	LatestBlockTime     time.Time `json:"latest_block_time"`
	EarliestBlockHash   string    `json:"earliest_block_hash"`
	EarliestAppHash     string    `json:"earliest_app_hash"`
	EarliestBlockHeight string    `json:"earliest_block_height"`
	EarliestBlockTime   time.Time `json:"earliest_block_time"`
	CatchingUp          bool      `json:"catching_up"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latest_block_hash":
			out.LatestBlockHash = string(in.String())
		case "latest_app_hash":
			out.LatestAppHash = string(in.String())
		case "latest_block_height":
			out.LatestBlockHeight = string(in.String())
		case "latest_block_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LatestBlockTime).UnmarshalJSON(data))
			}
		case "earliest_block_hash":
			out.EarliestBlockHash = string(in.String())
		case "earliest_app_hash":
			out.EarliestAppHash = string(in.String())
		case "earliest_block_height":
			out.EarliestBlockHeight = string(in.String())
		case "earliest_block_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EarliestBlockTime).UnmarshalJSON(data))
			}
		case "catching_up":
			out.CatchingUp = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode2(out *jwriter.Writer, in struct {
	LatestBlockHash     string    `json:"latest_block_hash"`
	LatestAppHash       string    `json:"latest_app_hash"`
	LatestBlockHeight   string    `json:"latest_block_height"`
	LatestBlockTime     time.Time `json:"latest_block_time"`
	EarliestBlockHash   string    `json:"earliest_block_hash"`
	EarliestAppHash     string    `json:"earliest_app_hash"`
	EarliestBlockHeight string    `json:"earliest_block_height"`
	EarliestBlockTime   time.Time `json:"earliest_block_time"`
	CatchingUp          bool      `json:"catching_up"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"latest_block_hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.LatestBlockHash))
	}
	{
		const prefix string = ",\"latest_app_hash\":"
		out.RawString(prefix)
		out.String(string(in.LatestAppHash))
	}
	{
		const prefix string = ",\"latest_block_height\":"
		out.RawString(prefix)
		out.String(string(in.LatestBlockHeight))
	}
	{
		const prefix string = ",\"latest_block_time\":"
		out.RawString(prefix)
		out.Raw((in.LatestBlockTime).MarshalJSON())
	}
	{
		const prefix string = ",\"earliest_block_hash\":"
		out.RawString(prefix)
		out.String(string(in.EarliestBlockHash))
	}
	{
		const prefix string = ",\"earliest_app_hash\":"
		out.RawString(prefix)
		out.String(string(in.EarliestAppHash))
	}
	{
		const prefix string = ",\"earliest_block_height\":"
		out.RawString(prefix)
		out.String(string(in.EarliestBlockHeight))
	}
	{
		const prefix string = ",\"earliest_block_time\":"
		out.RawString(prefix)
		out.Raw((in.EarliestBlockTime).MarshalJSON())
	}
	{
		const prefix string = ",\"catching_up\":"
		out.RawString(prefix)
		out.Bool(bool(in.CatchingUp))
	}
	out.RawByte('}')
}
func easyjson3d16d037Decode1(in *jlexer.Lexer, out *struct {
	ProtocolVersion struct {
		P2P   string `json:"p2p"`
		Block string `json:"block"`
		App   string `json:"app"`
	} `json:"protocol_version"`
	ID         string `json:"id"`
	ListenAddr string `json:"listen_addr"`
	Network    string `json:"network"`
	Version    string `json:"version"`
	Channels   string `json:"channels"`
	Moniker    string `json:"moniker"`
	Other      struct {
		TxIndex    string `json:"tx_index"`
		RPCAddress string `json:"rpc_address"`
	} `json:"other"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "protocol_version":
			easyjson3d16d037Decode5(in, &out.ProtocolVersion)
		case "id":
			out.ID = string(in.String())
		case "listen_addr":
			out.ListenAddr = string(in.String())
		case "network":
			out.Network = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "channels":
			out.Channels = string(in.String())
		case "moniker":
			out.Moniker = string(in.String())
		case "other":
			easyjson3d16d037Decode6(in, &out.Other)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode1(out *jwriter.Writer, in struct {
	ProtocolVersion struct {
		P2P   string `json:"p2p"`
		Block string `json:"block"`
		App   string `json:"app"`
	} `json:"protocol_version"`
	ID         string `json:"id"`
	ListenAddr string `json:"listen_addr"`
	Network    string `json:"network"`
	Version    string `json:"version"`
	Channels   string `json:"channels"`
	Moniker    string `json:"moniker"`
	Other      struct {
		TxIndex    string `json:"tx_index"`
		RPCAddress string `json:"rpc_address"`
	} `json:"other"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"protocol_version\":"
		out.RawString(prefix[1:])
		easyjson3d16d037Encode5(out, in.ProtocolVersion)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"listen_addr\":"
		out.RawString(prefix)
		out.String(string(in.ListenAddr))
	}
	{
		const prefix string = ",\"network\":"
		out.RawString(prefix)
		out.String(string(in.Network))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix)
		out.String(string(in.Channels))
	}
	{
		const prefix string = ",\"moniker\":"
		out.RawString(prefix)
		out.String(string(in.Moniker))
	}
	{
		const prefix string = ",\"other\":"
		out.RawString(prefix)
		easyjson3d16d037Encode6(out, in.Other)
	}
	out.RawByte('}')
}
func easyjson3d16d037Decode6(in *jlexer.Lexer, out *struct {
	TxIndex    string `json:"tx_index"`
	RPCAddress string `json:"rpc_address"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tx_index":
			out.TxIndex = string(in.String())
		case "rpc_address":
			out.RPCAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode6(out *jwriter.Writer, in struct {
	TxIndex    string `json:"tx_index"`
	RPCAddress string `json:"rpc_address"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tx_index\":"
		out.RawString(prefix[1:])
		out.String(string(in.TxIndex))
	}
	{
		const prefix string = ",\"rpc_address\":"
		out.RawString(prefix)
		out.String(string(in.RPCAddress))
	}
	out.RawByte('}')
}
func easyjson3d16d037Decode5(in *jlexer.Lexer, out *struct {
	P2P   string `json:"p2p"`
	Block string `json:"block"`
	App   string `json:"app"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "p2p":
			out.P2P = string(in.String())
		case "block":
			out.Block = string(in.String())
		case "app":
			out.App = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d16d037Encode5(out *jwriter.Writer, in struct {
	P2P   string `json:"p2p"`
	Block string `json:"block"`
	App   string `json:"app"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"p2p\":"
		out.RawString(prefix[1:])
		out.String(string(in.P2P))
	}
	{
		const prefix string = ",\"block\":"
		out.RawString(prefix)
		out.String(string(in.Block))
	}
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		out.String(string(in.App))
	}
	out.RawByte('}')
}
