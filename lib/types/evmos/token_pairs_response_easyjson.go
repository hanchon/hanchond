// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package evmos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE247f23dDecodeGithubComHanchonHanchondLibTypesEvmos(in *jlexer.Lexer, out *TokenPairsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token_pairs":
			if in.IsNull() {
				in.Skip()
				out.TokenPairs = nil
			} else {
				in.Delim('[')
				if out.TokenPairs == nil {
					if !in.IsDelim(']') {
						out.TokenPairs = make([]struct {
							Erc20Address  string `json:"erc20_address"`
							Denom         string `json:"denom"`
							Enabled       bool   `json:"enabled"`
							ContractOwner string `json:"contract_owner"`
						}, 0, 1)
					} else {
						out.TokenPairs = []struct {
							Erc20Address  string `json:"erc20_address"`
							Denom         string `json:"denom"`
							Enabled       bool   `json:"enabled"`
							ContractOwner string `json:"contract_owner"`
						}{}
					}
				} else {
					out.TokenPairs = (out.TokenPairs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Erc20Address  string `json:"erc20_address"`
						Denom         string `json:"denom"`
						Enabled       bool   `json:"enabled"`
						ContractOwner string `json:"contract_owner"`
					}
					easyjsonE247f23dDecode(in, &v1)
					out.TokenPairs = append(out.TokenPairs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagination":
			easyjsonE247f23dDecode1(in, &out.Pagination)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE247f23dEncodeGithubComHanchonHanchondLibTypesEvmos(out *jwriter.Writer, in TokenPairsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token_pairs\":"
		out.RawString(prefix[1:])
		if in.TokenPairs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TokenPairs {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonE247f23dEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pagination\":"
		out.RawString(prefix)
		easyjsonE247f23dEncode1(out, in.Pagination)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenPairsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE247f23dEncodeGithubComHanchonHanchondLibTypesEvmos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenPairsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE247f23dEncodeGithubComHanchonHanchondLibTypesEvmos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenPairsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE247f23dDecodeGithubComHanchonHanchondLibTypesEvmos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenPairsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE247f23dDecodeGithubComHanchonHanchondLibTypesEvmos(l, v)
}
func easyjsonE247f23dDecode1(in *jlexer.Lexer, out *struct {
	NextKey string `json:"next_key"`
	Total   string `json:"total"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next_key":
			out.NextKey = string(in.String())
		case "total":
			out.Total = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE247f23dEncode1(out *jwriter.Writer, in struct {
	NextKey string `json:"next_key"`
	Total   string `json:"total"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"next_key\":"
		out.RawString(prefix[1:])
		out.String(string(in.NextKey))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.String(string(in.Total))
	}
	out.RawByte('}')
}
func easyjsonE247f23dDecode(in *jlexer.Lexer, out *struct {
	Erc20Address  string `json:"erc20_address"`
	Denom         string `json:"denom"`
	Enabled       bool   `json:"enabled"`
	ContractOwner string `json:"contract_owner"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "erc20_address":
			out.Erc20Address = string(in.String())
		case "denom":
			out.Denom = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "contract_owner":
			out.ContractOwner = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE247f23dEncode(out *jwriter.Writer, in struct {
	Erc20Address  string `json:"erc20_address"`
	Denom         string `json:"denom"`
	Enabled       bool   `json:"enabled"`
	ContractOwner string `json:"contract_owner"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"erc20_address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Erc20Address))
	}
	{
		const prefix string = ",\"denom\":"
		out.RawString(prefix)
		out.String(string(in.Denom))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"contract_owner\":"
		out.RawString(prefix)
		out.String(string(in.ContractOwner))
	}
	out.RawByte('}')
}
